name: Predict & open PR (auto-merge)

on:
  workflow_dispatch:
  schedule:
    - cron: "30 6 * * *"     # daily 06:30 UTC
    - cron: "30 22 * * SAT"  # Sat night top-up (UTC)
    - cron: "30 22 * * SUN"  # Sun night top-up (UTC)
    - cron: "30 8 * * MON"   # Mon morning tidy-up (UTC)

permissions:
  contents: write
  pull-requests: write

jobs:
  predict:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: predict
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install -r requirements.txt

      # Rebuild team strengths from finished matches (simple Elo)
      - name: Update team ratings (Elo from finished matches)
        env:
          PYTHONPATH: ${{ github.workspace }}
          FOOTBALL_DATA_TOKEN: ${{ secrets.FOOTBALL_DATA_TOKEN }}
        run: python -m scripts.update_ratings_elo

      - name: Generate predictions & tips
        env:
          PYTHONPATH: ${{ github.workspace }}
          FOOTBALL_DATA_TOKEN: ${{ secrets.FOOTBALL_DATA_TOKEN }}
          FD_WINDOW_DAYS: "14"
        run: python -m scripts.generate

      # 1) Create the PR
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: "auto/update-${{ github.run_id }}"
          title: "Auto: refreshed ratings & predictions â€“ run #${{ github.run_id }}"
          body-path: "reports/PR_BODY.md"
          commit-message: "chore: update ratings, predictions and tips"
          delete-branch: true
          # labels: automated   # only if the label already exists

      # 2) Merge the PR via the GitHub API (squash)
      - name: Merge Pull Request (squash)
        if: steps.cpr.outputs.pull-request-number
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = Number(process.env.PR_NUMBER || 0);
            if (!pr) {
              core.setFailed('No pull-request number from create-pull-request step.');
            } else {
              core.info(`Merging PR #${pr}...`);
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr,
                merge_method: 'squash'
              });
              core.info(`Merged PR #${pr}.`);
            }
